{% set insertionPoints = schema.language('php').get('insertion-points') %}
<?php

namespace {{ schema_psr_namespace(schema) }};

{% block use_statements %}
use Gdbots\Pbj\AbstractMessage;
{% if schema.fields|length %}
use Gdbots\Pbj\FieldBuilder as Fb;
{% endif %}
use Gdbots\Pbj\Schema;
{% if schema.fields|length %}
use Gdbots\Pbj\Type as T;
{% endif %}
{% set format_class = false %}
{% for field in schema.fields %}
{% if field.format %}
{% set format_class = true %}
{% endif %}
{% if field.language('php').get('classname') %}
use {{ field.language('php').get('classname') }};
{% endif %}
{% for anyOf in field.anyOf %}
use {{ anyOf.language('php').get('namespace') }}\{{ getClassName(anyOf, false, true, true) }};
{% endfor %}
{% endfor %}
{% for mixin in schema.mixins %}
{% if not isSameNamespace(schema, mixin) %}
use {{ mixin.language('php').get('namespace') }}\{{ getClassName(mixin, true, true, true) }};
use {{ mixin.language('php').get('namespace') }}\{{ getClassName(mixin, true, true, true, 'Mixin') }};
{% if mixin.mixins|length or mixin.language('php').get('insertion-points') %}
use {{ mixin.language('php').get('namespace') }}\{{ getClassName(mixin, true, true, true, 'Trait') }};
{% endif %}
{% endif %}
{% endfor %}
{% if format_class %}
use Gdbots\Pbj\Enum\Format;
{% endif %}
{% if insertionPoints %}
{{ indentString(insertionPoints.imports, 0) }}
{% endif %}
{% endblock use_statements %}

{% block class_definition %}
final class {{ schema_class_name(schema, true) }} extends AbstractMessage implements
    {{ schema_class_name(schema) }}{% if schema.mixins|length %},{% endif %}

{% for mixin in schema.mixins %}
    {{ schema_fq_class_name(mixin, true) }}{% if not loop.last %},{% endif %}

{% endfor %}
{% endblock class_definition %}
{
{% block class_body %}
{% for mixin in schema.mixins %}
{% if mixin.mixins|length or mixin.language('php').get('insertion-points') %}
    use {{ schema_fq_class_name(mixin, true) }}Trait;
{% endif %}
{% endfor %}

    /**
     * @return Schema
     */
    protected static function defineSchema()
    {
{% if schema.fields|length or schema.mixins|length %}
        return new Schema('{{ schema.id }}', __CLASS__,
{% if schema.fields|length %}
            [
{% import 'php/macros.twig' as macros %}
{% for field in schema.fields %}
              {{ macros.draw_field(field, 16, loop.last) }}
{%- endfor %}
            ]{% if schema.mixins|length %},{% endif %}
{% else %}
            []{% if schema.mixins|length %},{% endif %}
{% endif %}

{% if schema.mixins|length %}
            [
{% for mixin in schema.mixins %}
                {{ schema_fq_class_name(mixin, true) }}Mixin::create(),
{% endfor %}
            ]
{% endif %}
        );
{% else %}
        return new Schema('{{ schema.id }}', __CLASS__);
{% endif %}
    }

{% if insertionPoints %}
{{ indentString(insertionPoints.methods, 4) }}
{% endif %}
{% endblock class_body %}
}
