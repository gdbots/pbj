{% import 'js/macros.twig' as macros %}
{% set insertion_points = schema.language('js').get('insertion-points') %}
// @link {{ compile_options.domain }}/json-schema/{{ schema.id.vendor }}/{{ schema.id.package }}/{% if schema.id.category %}{{ schema.id.category }}/{% endif %}{{ schema.id.message }}/{{ schema.id.version }}.json#
{{ imports }}

export default class {{ schema_to_class_name(schema, true) }} extends Message {
  /**
   * @private
   *
   * @returns {Schema}
   */
  static defineSchema() {
{% if fields|length or schema.mixins|length %}
    return new Schema(this.SCHEMA_ID, this,
      [
{% for field in fields %}
        {{ macros.draw_field(field, 8) }}
{%- endfor %}
      ],
      this.MIXINS,
    );
{% else %}
    return new Schema(this.SCHEMA_ID, this);
{% endif %}
  }
{% if insertion_points %}

{{ indent_string(insertion_points.methods, 2) }}
{% endif %}
}

const M = {{ schema_to_class_name(schema, true) }};
M.prototype.SCHEMA_ID = M.SCHEMA_ID = '{{ schema.id }}';
M.prototype.SCHEMA_CURIE = M.SCHEMA_CURIE = '{{ schema.id.curie }}';
M.prototype.SCHEMA_CURIE_MAJOR = M.SCHEMA_CURIE_MAJOR = '{{ schema.id.getCurieWithMajorRev() }}';

{% if schema.mixins|length %}
M.prototype.MIXINS = M.MIXINS = [
{% for mixin in schema.mixins %}
  '{{ mixin.id.getCurieWithMajorRev() }}',
  '{{ mixin.id.curie }}',
{% endfor %}
];
{% else %}
M.prototype.MIXINS = M.MIXINS = [];
{% endif %}

{% for field in fields %}
M.prototype.{{ field.name|upper }}_FIELD = M.{{ field.name|upper }}_FIELD = '{{ field.name }}';
{% endfor %}

{% if fields|length %}
M.prototype.FIELDS = M.FIELDS = [
{% for field in fields %}
  M.{{ field.name|upper }}_FIELD,
{% endfor %}
];
{% else %}
M.prototype.FIELDS = M.FIELDS = [];
{% endif %}
{% for mixin in schema.mixins %}
{% if mixin.mixins|length or mixin.language('js').get('insertion-points') %}

{{ schema_to_fq_class_name(mixin, true) }}Trait(M);
{% endif %}
{%- endfor %}

Object.freeze(M);
Object.freeze(M.prototype);
