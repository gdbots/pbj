{#
    Render schema block
    Parameters:
        schema - a SchemaDescriptor instance
        compileOptions - a CompileOptions instance
#}
{% macro draw_schema(schema, compileOptions) %}
{% set fields = schema.fields|merge(schema.inheritedFields) %}
{
  "id": "{{ compileOptions.domain }}/{{ schema.id.vendor }}/{{ schema.id.package }}/{% if schema.id.category %}{{ schema.id.category }}/{% endif %}{{ schema.id.message }}/{{ schema.id.version }}.json",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    {% if not schema.isMixinSchema %}
      "_schema": {
        "type": "string",
        "pattern": "^pbj:([a-z0-9-]+):([a-z0-9\\.-]+):([a-z0-9-]+)?:([a-z0-9-]+):([0-9]+-[0-9]+-[0-9]+)$",
        "id": "{{ schema.id }}"
      },
    {% endif %}

    {% for field in fields %}
      {{ _self.draw_field(field) }}{% if not loop.last or schema.mixins|length  %},{% endif %}
    {% endfor %}
  },

  {% set required = [] %}
  {% if not schema.isMixinSchema %}
    {% set required = required|merge(['_schema']) %}
  {% endif %}
  {% for field in fields %}
    {% if field.required %}
      {% set required = required|merge([field.name]) %}
    {% endif %}
  {% endfor %}
  {% if required|length %}
    "required": [{% for field in required %}"{{ field }}"{% if not loop.last %}, {% endif %}{% endfor %}],
  {% endif %}

  {% set defs = [] %}
  {% for field in fields %}
    {% if field.anyOf %}
      {% set defs = defs|merge(field.anyOf) %}
    {% endif %}
  {% endfor %}
  {% if defs|length %}
    "definitions": {
      {% set shown = [] %}
      {% for def in defs %}
        {% if def.id not in shown %}
           "{{ def.id.message|lower }}": {"$ref": "{{ compileOptions.domain }}/{{ def.id.vendor }}/{{ def.id.package }}/{% if def.id.category %}{{ def.id.category }}/{% endif %}{{ def.id.message }}/{{ def.id.version }}.json" }{% if not loop.last %}, {% endif %}
           {% set shown = shown|merge([def.id]) %}
         {% endif %}
      {% endfor %}
    },
  {% endif %}

  "additionalProperties": {% if schema.isMixinSchema %}true{% else %}false{% endif %}
}
{% endmacro %}

{#
    Render field block
    Parameters:
        field - a FieldDescriptor instance
#}
{% macro draw_field(field) %}
  "{{ field.name }}": {
    {% if field.rule ~ '' == 'map' %}
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z_]{1}[a-zA-Z0-9_]{1,99}$": {
          {{ _self.draw_field_properties(field, true) }}
        }
      },
      "maxProperties": 1,
      "minProperties": 1,
      "additionalProperties": false,
    {% elseif field.rule ~ '' == 'list' %}
      "items": [
        {% if field.anyOf %}
          {% for schema in field.anyOf %}
            { "$ref": "#/definitions/{{ schema.id.message|lower }}" }{% if not loop.last %}, {% endif %}
          {% endfor %}
        {% else %}
          {
            "type": "object",
            "patternProperties": {
              "^[a-zA-Z_]{1}[a-zA-Z0-9_]{1,99}$": {
                {{ _self.draw_field_properties(field, true) }}
              }
            },
            "maxProperties": 1,
            "minProperties": 1,
            "additionalProperties": false
          }
        {% endif %}
      ],
    {% elseif field.type.typeName ~ '' == 'message-ref' %}
      "type": "object",
      "properties": {
        "curie": {
          "type": "string",
          "pattern": "^([a-z0-9-]+):([a-z0-9\\.-]+):([a-z0-9-]+)?:([a-z0-9-]+)$",
        },
        "id": {
          "type": "string",
          "pattern": "^[A-Za-z0-9:_-]+$"
        },
        "type": {
          "type": "string"
        }
      },
      "required": ["type", "coordinates"],
    {% elseif field.type.typeName ~ '' == 'geo-point' %}
      "type": "object",
      "properties": {
        "type": {
          "required": true,
          "type": "string",
          "pattern": "^Point$"
        },
        "coordinates": {
          "required": true,
          "type": "array",
          "items": [
            {
              "required": true,
              "type": "number",
              "minimum": -180,
              "maximum": 180
            },
            {
              "required": true,
              "type": "number",
              "minimum": -90,
              "maximum": 90
            }
          ]
        }
      },
    {% else %}
      {{ _self.draw_field_properties(field) }}
    {% endif %}

    "pbj": {
      "type": "{{ field.type.typeName }}",
      {% if field.rule %}
        "rule": "{{ field.rule }}",
      {% endif %}
      {% if field.format %}
        "format": "{{ field.format }}",
      {% endif %}
      {% if field.precision %}
        "precision": {{ field.precision }},
      {% endif %}
      {% if field.scale %}
        "scale": {{ field.scale }},
      {% endif %}
      {% if not field.useTypeDefault %}
        "useTypeDefault": false,
      {% endif %}
      {% if field.overridable %}
        "overridable": true,
      {% endif %}
    }
  }
{% endmacro %}

{#
    Render field properties
    Parameters:
        field - a FieldDescriptor instance
        isFirstLevel - whether or not to handle level one properties
#}
{% macro draw_field_properties(field, isFirstLevel) %}
  {% if not isFirstLevel and field.rule ~ '' == 'map' %}
    "type": "object",
  {% elseif not isFirstLevel and field.rule ~ '' == 'list' %}
    "type": "array",
  {% elseif field.type.typeName ~ '' in ['decimal', 'float'] %}
    "type": "number",
  {% elseif field.type.typeName ~ '' in [
    'big-int', 'int-enum', 'int', 'medium-int',
    'signed-big-int', 'signed-big-int', 'signed-medium-int',
    'signed-small-int', 'signed-tiny-int', 'small-int',
    'tiny-int', 'timestamp'
  ] %}
    "type": "integer",
  {% elseif field.type.typeName ~ '' in ['boolean'] %}
    "type": "boolean",
  {% elseif field.type.typeName ~ '' in ['date', 'geo-point', 'message-ref', 'message'] %}
    "type": "object",
  {% else %}
    "type": "string",
  {% endif %}

  {% if field.description %}
    "description": "{{ field.description|reduceSpaces|replace({'"': '\\"'}) }}",
  {% endif %}

  {% if
    field.default|default(field.type.default)
    and field.type.typeName ~ '' not in ['microtime', 'timestamp', 'uuid', 'time-uuid']
  %}
    "default": {{ field.default|default(field.type.default)|json_encode }},
  {% endif %}

  {% set hasPattern = false %}
  {% if field.pattern %}
    {% set hasPattern = true %}
    "pattern": "{{ field.pattern|replace({'\\': '\\\\'}) }}",
  {% elseif field.type.typeName ~ '' in ['uuid', 'time-uuid'] %}
    {% set hasPattern = true %}
    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
  {% elseif field.type.typeName ~ '' == 'identifier' %}
    {% set hasPattern = true %}
    "pattern": "^[\\w\\.-_]+$",
  {% elseif field.type.typeName ~ '' == 'microtime' %}
    {% set hasPattern = true %}
    "pattern": "^[1-9]{1}[0-9]{12,15}$",
  {% elseif field.format ~ '' == 'url' %}
    {% set hasPattern = true %}
    "pattern": "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
  {% endif %}

  {% if field.enum %}
    "enum": [{% for value in field.enum.values %}{{ value|json_encode }}{% if not loop.last %}, {% endif %}{% endfor %}],
  {% endif %}

  {% if not field.enum and not hasPattern %}
    {% if field.type.typeName ~ '' in ['string', 'text', 'medium-text'] %}
      "minLength": {{ field.minLength|default(0) }},
      "maxLength": {{ field.maxLength|default(field.type.maxBytes) }},
    {% elseif field.type.typeName ~ '' not in ['boolean', 'date', 'geo-point', 'message-ref', 'message'] %}
      "minimum": {{ field.min|default(field.type.min) }},
      "maximum": {{ field.max|default(field.type.max) }},
    {% endif %}
  {% endif %}

  {% if field.anyOf %}
    "anyOf": [
      {% for schema in field.anyOf %}
        { "$ref": "#/definitions/{{ schema.id.message|lower }}" }{% if not loop.last %}, {% endif %}
      {% endfor %}
    ],
  {% endif %}

  {% if field.language('json-schema').get('faker') %}
    "faker": "{{ field.language('json-schema').get('faker') }}",
  {% endif %}
{% endmacro %}
