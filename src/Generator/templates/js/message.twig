{% set classNameVMajor = getClassName(schema, true) %}
{% set insertionPoints = schema.language('js').get('insertion-points') %}
'use strict';

{% block use_statements %}
import SystemUtils from 'gdbots/common/util/system-utils';
import Schema from 'gdbots/pbj/schema';
import {{ getClassName(schema) }} from '{{ schema.language('js').get('namespace') }}/{{ schema.id.message }}';
{% set format_class = false %}
{% for field in schema.fields %}
{% if field.format %}
{% set format_class = true %}
{% endif %}
import {{ className(field.type) }} from 'gdbots/pbj/type/{{ className(field.type)|replace({'Type': ''})|toSlugFromCamel|lower }}-type';
{% if field.anyOf %}
{% if field.anyOf|length == 1 %}
import {{ getClassName(field.anyOf.0) }} from '{{ field.anyOf.0.language('js').get('namespace') }}/{{ field.anyOf.0.id.message }}';
{% else %}
{% for s in field.anyOf %}
import {{ getClassName(s) }} from '{{ s.language('js').get('namespace') }}/{{ s.id.message }}';
{% endfor %}
{% endif %}
{% elseif field.language('js').get('instance') %}
import {{ field.language('js').get('instance').classname }} from '{{ field.language('js').get('instance').namespace }}';
{% endif %}
{% endfor %}
{% for mixin in schema.mixins %}
{% if not isSameNamespace(schema, mixin) %}
import {{ getClassName(mixin, true) }}Mixin from '{{ mixin.language('js').get('namespace') }}/{{ mixin.id.message }}-v{{ mixin.id.version.major }}-mixin';
{% endif %}
{% endfor %}
{% if format_class %}
import Format from 'gdbots/pbj/enum/format';
{% endif %}
{% if insertionPoints %}
{{ indentString(insertionPoints.imports, 0) }}
{% endif %}
{% endblock use_statements %}

{% block class_definition %}
export default class {{ classNameVMajor }} extends SystemUtils.mixinClass({{ getClassName(schema) }})
{% endblock class_definition %}
{
{% block class_body %}
  /**
   * @return Schema
   */
  static defineSchema() {
{% if schema.fields|length or schema.mixins|length %}
    return new Schema('{{ schema.id }}', this.name,
{% if schema.fields|length %}
      [
{% import 'js/macros.twig' as macros %}
{% for field in schema.fields %}
        {{ macros.draw_field(field, 8, loop.last) }}
{%- endfor %}
      ]{% if schema.mixins|length %},{% endif %}
{% else %}
      []{% if schema.mixins|length %},{% endif %}
{% endif %}

{% if schema.mixins|length %}
      [
{% for mixin in schema.mixins %}
        {{ getClassName(mixin, true) }}Mixin.create(){% if not loop.last %}, {% endif %}

{% endfor %}
      ]
{% endif %}
    );
{% else %}
    return new Schema('{{ schema.id }}', this.name);
{% endif %}
  }

{% if insertionPoints %}
{{ indentString(insertionPoints.methods, 2) }}
{% endif %}
{% endblock class_body %}
}
