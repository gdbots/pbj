{#
    Render field block
    Parameters:
        field - a FieldDescriptor instance
        spaces - number of spaces
        isLastItem - whether or not to add comma at the end of the block
#}
{% macro draw_field(field, spaces, isLastItem) %}
{% set spaces = '%' ~ spaces ~ 's' %}
{% if field.description %}
{% set lines = field.description|split("\n") %}
  /*
{% for line in lines %}
{{ spaces|format('') }} * {{ line|reduceSpaces }}
{% endfor %}
{{ spaces|format('') }} */
{{ spaces|format('') }}Fb::create('{{ field.name }}', T\{{ className(field.type) }}::create())
{% else %}
  Fb::create('{{ field.name }}', T\{{ className(field.type) }}::create())
{% endif %}
{% if field.isASingleValue %}
    {{ spaces|format('') }}->asASingleValue()
{% endif %}
{% if field.isASet %}
    {{ spaces|format('') }}->asASet()
{% endif %}
{% if field.isAList %}
    {{ spaces|format('') }}->asAList()
{% endif %}
{% if field.isAMap %}
    {{ spaces|format('') }}->asAMap()
{% endif %}
{% if field.required %}
    {{ spaces|format('') }}->required()
{% endif %}
{% if field.minLength %}
    {{ spaces|format('') }}->minLength({{ field.minLength }})
{% endif %}
{% if field.maxLength %}
    {{ spaces|format('') }}->maxLength({{ field.maxLength }})
{% endif %}
{% if field.pattern %}
    {{ spaces|format('') }}->pattern('{{ field.pattern }}')
{% endif %}
{% if field.format %}
    {{ spaces|format('') }}->format(Format::{{ field.format|upper }}())
{% endif %}
{% if field.min %}
    {{ spaces|format('') }}->min({{ field.min }})
{% endif %}
{% if field.max %}
    {{ spaces|format('') }}->max({{ field.max }})
{% endif %}
{% if field.precision %}
    {{ spaces|format('') }}->precision({{ field.precision }})
{% endif %}
{% if field.scale %}
    {{ spaces|format('') }}->scale({{ field.scale }})
{% endif %}
{% if field.language('php').get('default') %}
{% if not field.language('php').get('hide_default') %}
    {{ spaces|format('') }}->withDefault({{ field.language('php').get('default')|reduceSpaces }})
{% endif %}
{% elseif field.default is not empty %}
    {{ spaces|format('') }}->withDefault({{ field.default|json_encode }})
{% endif %}
{% if not field.useTypeDefault %}
    {{ spaces|format('') }}->useTypeDefault(false)
{% endif %}
{% if field.anyOf %}
{% if field.anyOf|length == 1 %}
    {{ spaces|format('') }}->className('{{ field.anyOf.0.language('php').get('namespace') }}\{{ getClassName(field.anyOf.0) }}')
{% else %}
    {{ spaces|format('') }}->anyOfClassNames([
{% for schema in field.anyOf %}
    {{ spaces|format('') }}  '{{ schema.language('php').get('namespace') }}\{{ getClassName(schema) }}'{% if not loop.last %}, {% endif %}

{% endfor %}
    {{ spaces|format('') }}])
{% endif %}
{% elseif field.language('php').get('classname') %}
    {{ spaces|format('') }}->className('{{ field.language('php').get('classname') }}')
{% endif %}
{% if field.overridable %}
    {{ spaces|format('') }}->overridable(true)
{% endif %}
{% if field.language('php').get('assertion') %}
    {{ spaces|format('') }}->assertion({{ field.language('php').get('assertion')|reduceSpaces }})
{% endif %}
    {{ spaces|format('') }}->build(){% if not isLastItem %},{% endif %}

{% endmacro %}
