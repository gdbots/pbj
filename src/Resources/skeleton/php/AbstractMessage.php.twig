<?php

namespace {{ schema.languageKey('php', 'namespace') }};

{% block use_statements %}
use Gdbots\Pbj\AbstractMessage;
use Gdbots\Pbj\FieldBuilder as Fb;
use Gdbots\Pbj\Schema;
use Gdbots\Pbj\Type as T;
use Gdbots\Pbj\Enum\Format;
{% for field in schema.inheritedFields|merge(schema.fields) %}
{% if field.languageKey('php', 'class_name') %}
use {{ field.languageKey('php', 'class_name') }};
{% endif %}
{% endfor %}
{% for mixin in schema.mixins %}
use {{ mixin.languageKey('php', 'namespace') }}\{{ mixin.id.message|toCamelFromSlug }}V{{ mixin.id.version.major }};
use {{ mixin.languageKey('php', 'namespace') }}\{{ mixin.id.message|toCamelFromSlug }}V{{ mixin.id.version.major }}Mixin;
use {{ mixin.languageKey('php', 'namespace') }}\{{ mixin.id.message|toCamelFromSlug }}V{{ mixin.id.version.major }}Trait;
{% endfor %}
{% endblock use_statements %}

{% block class_definition %}
final class {{ className }}V{{ schema.id.version.major }} extends AbstractMessage implements {{ className }}{% for mixin in schema.mixins %}, {{ mixin.id.message|toCamelFromSlug }}V{{ mixin.id.version.major }}{% endfor %}
{% if schema.mixins|length %}
  {# note: linebreak for cleaner print #}

{% endif %}
{% endblock class_definition %}
{
{% block class_body %}
    {%- for mixin in schema.mixins %}
    use {{ mixin.id.message|toCamelFromSlug }}V{{ mixin.id.version.major }}Trait;
    {% endfor %}

    /**
     * @return Schema
     */
    protected static function defineSchema()
    {
        return new Schema('{{ schema.id }}', __CLASS__, [
          {% import 'php/macros.php.twig' as macros %}
          {%- for field in schema.inheritedFields|merge(schema.fields) %}
            {{- macros.draw_field(field) }}{%- if not loop.last %},{% endif %}

          {% endfor -%}
        ], [
          {%- for mixin in schema.mixins %}
            {{- mixin.id.message|toCamelFromSlug }}V{{ mixin.id.version.major }}Mixin::create(){%- if not loop.last %}, {% endif %}
          {%- endfor -%}
        ]);
    }
{% endblock class_body %}
}
