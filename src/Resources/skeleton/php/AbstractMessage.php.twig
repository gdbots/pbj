<?php

namespace {{ schema.languageKey('php', 'namespace') }};

{% block use_statements %}
use Gdbots\Pbj\AbstractMessage;
use Gdbots\Pbj\FieldBuilder as Fb;
use Gdbots\Pbj\Schema;
use Gdbots\Pbj\Type as T;
{% set format_class = false %}
{% for field in schema.fields %}
{% if field.format %}
{% set format_class = true %}
{% endif %}
{% if field.languageKey('php', 'class_name') %}
use {{ field.languageKey('php', 'class_name') }};
{% endif %}
{% endfor %}
{% for mixin in schema.mixins %}
use {{ mixin.languageKey('php', 'namespace') }}\{{ getClassName(mixin, true) }};
use {{ mixin.languageKey('php', 'namespace') }}\{{ getClassName(mixin, true) }}Mixin;
use {{ mixin.languageKey('php', 'namespace') }}\{{ getClassName(mixin, true) }}Trait;
{% endfor %}
{% if format_class %}
use Gdbots\Pbj\Enum\Format;
{% endif %}
{% endblock use_statements %}

{% block class_definition %}
final class {{ getClassName(schema, true) }} extends AbstractMessage implements {{ getClassName(schema) }}{% for mixin in schema.mixins %}, {{ getClassName(mixin, true) }}{% endfor %}
{% if schema.mixins|length %}
  {# note: linebreak for cleaner print #}

{% endif %}
{% endblock class_definition %}
{
{% block class_body %}
{% for mixin in schema.mixins %}
    use {{ mixin.id.message|toCamelFromSlug }}V{{ mixin.id.version.major }}Trait;
{% endfor %}

    /**
     * @return Schema
     */
    protected static function defineSchema()
    {
        return new Schema('{{ schema.id }}', __CLASS__, [
{% import 'php/macros.php.twig' as macros %}
{% for field in schema.fields %}
          {{ macros.draw_field(field, loop.last) }}
{%- endfor %}
{% if schema.mixins|length %}
        ], [
{% for mixin in schema.mixins %}
            {{ mixin.id.message|toCamelFromSlug }}V{{ mixin.id.version.major }}Mixin::create(){% if not loop.last %}, {% endif %}

{% endfor %}
        ]);
{% else %}
        ], []);
{% endif %}
    }
{% endblock class_body %}
}
